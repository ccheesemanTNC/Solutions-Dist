"use strict";
/* Copyright (c) 2018 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDomain = exports.getDomains = void 0;
const arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
const hub_common_1 = require("@esri/hub-common");
const hub_common_2 = require("@esri/hub-common");
/**
 * Get the domains associated with a Hub Site.
 * @param siteId - Identifier of the Hub Site
 * @param requestOptions - request options that may include authentication
 * @returns A Promise that will resolve with the domains associated with the site.
 */
function getDomains(siteId, requestOptions) {
    const url = hub_common_2._getDomainServiceUrl(hub_common_1.getHubApiUrl(requestOptions));
    const options = Object.assign({ params: { siteId }, httpMethod: "GET" }, requestOptions);
    return arcgis_rest_request_1.request(url, options);
}
exports.getDomains = getDomains;
/**
 * Get the domain associated with a Hub Site. Since a site may have a
 * custom domain, in addition to a default domain, we will return the
 * custom domain over the default domain.
 *
 * @param siteId - Identifier of the Hub Site
 * @param requestOptions - request options that may include authentication
 * @returns A Promise that will resolve with the domains associated with the site.
 */
function getDomain(siteId, requestOptions) {
    return getDomains(siteId, requestOptions).then((response) => {
        if (response.length > 1) {
            // ok - in this case, it's likely that we have a default domain and a custom domain...
            // we want the one that's custom... i.e. does not contain arcgis.com
            const customEntry = response.reduce((acc, entry) => {
                if (!entry.hostname.includes("arcgis.com")) {
                    acc = entry;
                }
                return acc;
            }, null);
            if (customEntry) {
                // return the custom domain
                return customEntry.hostname;
            }
            else {
                // just pick the first one
                return response[0].hostname;
            }
        }
        else {
            // there is only 1, so return it
            return response[0].hostname;
        }
    });
}
exports.getDomain = getDomain;
//# sourceMappingURL=get-domain.js.map