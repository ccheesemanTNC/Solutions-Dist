"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._getImageCropIdsFromLayout = void 0;
const hub_common_1 = require("@esri/hub-common");
/**
 * Traverse the layout graph, locating any cards that may have image resources
 * returning an array containing the resource information.
 * @param {Object} layout the layout to extract image cropIds from
 * @private
 */
function _getImageCropIdsFromLayout(layout) {
    const imgAssets = [];
    const headerLogo = hub_common_1.getProp(layout, "header.component.settings.logo");
    if (headerLogo && headerLogo.cropId) {
        imgAssets.push(headerLogo);
    }
    const sections = hub_common_1.getProp(layout, "sections") || [];
    return sections
        .reduce(collectSectionAssets, imgAssets)
        .filter(hasCropId)
        .map(extractCropId);
}
exports._getImageCropIdsFromLayout = _getImageCropIdsFromLayout;
function collectSectionAssets(assets, section) {
    const sectionAssets = section.rows
        .reduce(collectCards, [])
        .filter(isImageOrJumbotronCard)
        .map(extractSettingsProperty);
    // retain crop info if section has an image background
    if (hub_common_1.getProp(section, "style.background.cropSrc")) {
        sectionAssets.unshift(section.style.background);
    }
    return assets.concat(sectionAssets);
}
function collectCards(acc, row) {
    return acc.concat(row.cards);
}
function isImageOrJumbotronCard(card) {
    return ["image-card", "jumbotron-card"].indexOf(card.component.name) > -1;
}
function extractSettingsProperty(card) {
    return card.component.settings;
}
function hasCropId(entry) {
    return !!entry.cropId;
}
function extractCropId(entry) {
    return entry.cropId;
}
//# sourceMappingURL=_get-image-crop-ids-from-layout.js.map