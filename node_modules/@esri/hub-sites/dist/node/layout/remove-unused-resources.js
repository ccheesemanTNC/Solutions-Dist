"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeUnusedResources = void 0;
const hub_common_1 = require("@esri/hub-common");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const _get_image_crop_ids_from_layout_1 = require("./_get-image-crop-ids-from-layout");
/**
 * THIS UTIL IS NO LONGER IN USE BUT MAY BE IN THE FUTURE - TATE
 */
/**
 * Removes any image "crop" versions that are no longer
 * used in the site layout.
 * TODO: Move to a module that is shared with Pages and then
 * also wire into the Page update cycle.
 * @param {String} id Id of the site or page item
 * @param {Object} layout Layout
 * @param {IHubRequestOptions} hubRequestOptions
 */
function removeUnusedResources(id, layout, hubRequestOptions) {
    const layoutImageCropIds = _get_image_crop_ids_from_layout_1._getImageCropIdsFromLayout(layout);
    return arcgis_rest_portal_1.getItemResources(id, hubRequestOptions).then(response => {
        const itemResourcesOnAGO = (response.resources || []).map(extractResourceProperty);
        const imageItemResourcesOnAGO = itemResourcesOnAGO.filter(resourceStartsWithImageSource);
        // getItemResources mutates the options, adding a params hash
        delete hubRequestOptions.params;
        const itemResourcesToRemove = getUnusedItemCrops(layoutImageCropIds, imageItemResourcesOnAGO);
        return removeUnusedResourcesFromAGO(id, itemResourcesToRemove, hubRequestOptions.authentication);
    });
}
exports.removeUnusedResources = removeUnusedResources;
function extractResourceProperty(entry) {
    return entry.resource;
}
function getUnusedItemCrops(layoutImageCropIds, itemImageResources) {
    if (!layoutContainsImageCards(layoutImageCropIds)) {
        // if there aren't any image cards in saved layout, delete all crops
        return itemImageResources;
    }
    // otherwise find crops for image cards that do not contain a current cropId
    return itemImageResources.filter(isNotACurrentImageCropId(layoutImageCropIds));
}
function layoutContainsImageCards(layoutImageCropIds) {
    return layoutImageCropIds.length > 0;
}
function resourceStartsWithImageSource(agoResource) {
    return agoResource.indexOf("hub-image-card-crop-") === 0;
}
function isNotACurrentImageCropId(imageCropIds) {
    const cropRegex = new RegExp(`-crop-(${imageCropIds.join("|")}).png$`);
    return (resource) => !resource.match(cropRegex);
}
function removeUnusedResourcesFromAGO(id, unusedCrops, authentication) {
    // failSafe these calls b/c this is not critical
    const failSaveRemoveItemResources = hub_common_1.failSafe(arcgis_rest_portal_1.removeItemResource, {
        success: true
    });
    return Promise.all(unusedCrops.map((resource) => failSaveRemoveItemResources({
        id,
        resource,
        authentication
    })));
}
//# sourceMappingURL=remove-unused-resources.js.map