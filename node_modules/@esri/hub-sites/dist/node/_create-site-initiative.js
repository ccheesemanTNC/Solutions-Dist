"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._createSiteInitiative = void 0;
const hub_common_1 = require("@esri/hub-common");
const hub_initiatives_1 = require("@esri/hub-initiatives");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
/**
 * Given a Site Template, locate the initiative template
 * then adlib it and create the initiative item
 * @param {object} siteTemplate Site Template
 * @param {object} settings adlib interpolation hash
 * @param {object} transforms adlib transforms hash
 * @param {IHubRequestOptions}} hubRequestOptions
 * @private
 */
function _createSiteInitiative(siteTemplate, settings, transforms, hubRequestOptions) {
    const cache = {};
    return hub_initiatives_1.getInitiativeTemplate(siteTemplate, hubRequestOptions)
        .then((initiativeTemplate) => {
        // set the url that will be in the site
        initiativeTemplate.item.url = settings.solution.url;
        initiativeTemplate.item.title = settings.solution.title;
        initiativeTemplate.item.owner = hubRequestOptions.authentication.username;
        initiativeTemplate.item.typeKeywords = hub_common_1.without(initiativeTemplate.item.typeKeywords, "Hub Initiative Template");
        initiativeTemplate.item.type = "Hub Initiative";
        // set the teams...
        Object.assign(initiativeTemplate.item.properties, settings.teams);
        // adlib to pick up anything else...
        const initiativeModel = hub_common_1.interpolate(initiativeTemplate, settings, transforms);
        // and save it
        return hub_initiatives_1.addInitiative(initiativeModel, hubRequestOptions);
    })
        .then((model) => {
        // hold in cache
        cache.model = model;
        // default to a success response
        let sharePrms = Promise.resolve({ success: true });
        // share it to the collab team if that got created
        const collabGroupId = hub_common_1.getProp(settings, "teams.collaborationGroupId");
        if (collabGroupId) {
            sharePrms = arcgis_rest_portal_1.shareItemWithGroup({
                id: model.item.id,
                groupId: collabGroupId,
                authentication: hubRequestOptions.authentication,
                confirmItemControl: true
            });
        }
        return sharePrms;
    })
        .then((_) => {
        return cache.model;
    })
        .catch((ex) => {
        throw Error(`site-utils::_createSiteInitiative Error ${ex}`);
    });
}
exports._createSiteInitiative = _createSiteInitiative;
//# sourceMappingURL=_create-site-initiative.js.map