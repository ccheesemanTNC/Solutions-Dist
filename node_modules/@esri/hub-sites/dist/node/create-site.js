"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSite = void 0;
const hub_common_1 = require("@esri/hub-common");
const ensure_required_site_properties_1 = require("./ensure-required-site-properties");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const hub_initiatives_1 = require("@esri/hub-initiatives");
/**
 * Create a New Site
 * Creates and protects the site item
 * Uploads any assets/thumbnails passed in via options.assets array
 * If not portal..,
 * - register the site as an application, w/ needed redirect uris
 * - register the domains with the Hub Domain Service
 * @param {Object} model Site Model to create
 * @param {Object} options options hash. Key prop is assets
 * @param {IHubRequestOptions} hubRequestOptions
 */
function createSite(model, options, hubRequestOptions) {
    // ensure properties
    model = ensure_required_site_properties_1.ensureRequiredSiteProperties(model, hubRequestOptions.authentication.username, hubRequestOptions.isPortal);
    // create the item
    return arcgis_rest_portal_1.createItem({
        item: hub_common_1.serializeModel(model),
        owner: model.item.owner,
        authentication: hubRequestOptions.authentication,
    })
        .then((createResponse) => {
        // hold onto the Id so we can return a complete model
        model.item.id = createResponse.id;
        // protect it
        return arcgis_rest_portal_1.protectItem({
            id: model.item.id,
            owner: model.item.owner,
            authentication: hubRequestOptions.authentication,
        });
    })
        .then((protectResponse) => {
        // do app registration
        return hub_common_1.registerSiteAsApplication(model, hubRequestOptions);
    })
        .then((appRegistrationResponse) => {
        // store the clientId
        model.data.values.clientId = appRegistrationResponse.client_id;
        // If we have a dcat section, hoist it out as it may contain complex adlib
        // templates that are needed at run-time
        // If we have data.values.dcatConfig, yank it off b/c that may have adlib template stuff in it
        const dcatConfig = hub_common_1.cloneObject(model.data.values.dcatConfig);
        delete model.data.values.dcatConfig;
        // with the id of the actual item
        model = hub_common_1.interpolateItemId(model);
        // re-attach if we got anything...
        if (dcatConfig) {
            model.data.values.dcatConfig = dcatConfig;
        }
        return arcgis_rest_portal_1.updateItem({
            item: hub_common_1.serializeModel(model),
            authentication: hubRequestOptions.authentication,
        });
    })
        .then((updateResponse) => {
        // Handle domains
        return hub_common_1.addSiteDomains(model, hubRequestOptions);
    })
        .then((domainResponses) => {
        // upload resources from url
        return hub_common_1.uploadResourcesFromUrl(model, options.assets || [], hubRequestOptions);
    })
        .then((uploadResponses) => {
        // default to a success response
        let sharePrms = Promise.resolve({ success: true });
        // share it to the collab team if that got created
        const collabGroupId = hub_common_1.getProp(model, "item.properties.collaborationGroupId");
        if (collabGroupId) {
            sharePrms = arcgis_rest_portal_1.shareItemWithGroup({
                id: model.item.id,
                groupId: collabGroupId,
                authentication: hubRequestOptions.authentication,
                confirmItemControl: true,
            });
        }
        return sharePrms;
    })
        .then((resp) => {
        // if we created an initiative, ensure we inject the site Id into it
        const initiativeItemId = hub_common_1.getProp(model, "item.properties.parentInitiativeId");
        if (initiativeItemId) {
            // get the item and update it
            return hub_initiatives_1.updateInitiativeSiteId(initiativeItemId, model.item.id, hubRequestOptions);
        }
        else {
            return Promise.resolve(true);
        }
    })
        .then((resp) => {
        return model;
    })
        .catch((err) => {
        throw Error(`site-utils::createSite - Error creating site ${JSON.stringify(err)}`);
    });
}
exports.createSite = createSite;
//# sourceMappingURL=create-site.js.map