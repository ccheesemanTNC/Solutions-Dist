"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPage = void 0;
const hub_common_1 = require("@esri/hub-common");
const ensure_required_page_properties_1 = require("./ensure-required-page-properties");
const link_site_and_page_1 = require("../link-site-and-page");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
/**
 * Given a Page model, create the item, protect it, share it, connect it to the site
 * and upload any resources.
 * @param {Object} model Page model to be created as an Item
 * @param {Object} options object containing shareTo, and space for future additions
 * @param {IHubRequestOptions} hubRequestOptions IRequestOptions object, with isPortal
 */
function createPage(model, options, hubRequestOptions) {
    // ensure we got authentication
    if (!hubRequestOptions.authentication) {
        throw new Error(`createPage must be passed hubRequestOptions.authentication`);
    }
    // ensure props
    const newPage = ensure_required_page_properties_1.ensureRequiredPageProperties(model, {
        username: hubRequestOptions.authentication.username,
        isPortal: hubRequestOptions.isPortal
    });
    // convert to a flat object w. .data --> .text as a json string
    const serializedModel = hub_common_1.serializeModel(newPage);
    // create the item
    return arcgis_rest_portal_1.createItem({
        item: serializedModel,
        owner: newPage.item.owner,
        authentication: hubRequestOptions.authentication
    })
        .then(createResponse => {
        // hold onto the Id so we can return a complete model
        newPage.item.id = createResponse.id;
        // protect it
        return arcgis_rest_portal_1.protectItem({
            id: newPage.item.id,
            owner: newPage.item.owner,
            authentication: hubRequestOptions.authentication
        });
    })
        .then(protectReponse => {
        // share to any groups
        let sharingPromises = [];
        if (Array.isArray(options.shareTo) && options.shareTo.length) {
            // map over the array sharing the item to all groups
            sharingPromises = options.shareTo.map((groupInfo) => {
                return arcgis_rest_portal_1.shareItemWithGroup({
                    id: newPage.item.id,
                    groupId: groupInfo.id,
                    authentication: hubRequestOptions.authentication,
                    confirmItemControl: groupInfo.confirmItemControl || false
                });
            });
            newPage.item.access = "shared";
        }
        return Promise.all(sharingPromises);
    })
        .then(response => {
        // link page to sites
        const sites = hub_common_1.getWithDefault(newPage, "data.values.sites", []);
        const requestOptions = {
            authentication: hubRequestOptions.authentication
        };
        return Promise.all(sites.map((entry) => {
            const opts = Object.assign({
                siteId: entry.id,
                pageModel: newPage
            }, requestOptions);
            return link_site_and_page_1.linkSiteAndPage(opts);
        }));
    })
        .then(siteLinkingResponse => {
        // upload resources
        const assets = hub_common_1.getWithDefault(options, "assets", []);
        return hub_common_1.uploadResourcesFromUrl(newPage, assets, hubRequestOptions);
    })
        .then(() => newPage)
        .catch(err => {
        throw Error(`createPage: Error creating page: ${err}`);
    });
}
exports.createPage = createPage;
//# sourceMappingURL=create-page.js.map