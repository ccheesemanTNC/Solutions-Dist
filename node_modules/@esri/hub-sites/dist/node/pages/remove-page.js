"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removePage = void 0;
const hub_common_1 = require("@esri/hub-common");
const unlink_site_and_page_1 = require("../unlink-site-and-page");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
/**
 * Remove a Page Item. This deletes the item.
 * @param {Object | String} idOrModel Model object or Item Id
 * @param {IRequestOptions} requestOptions
 */
function removePage(idOrModel, requestOptions) {
    let modelPromise = Promise.resolve(idOrModel);
    if (typeof idOrModel === "string") {
        modelPromise = hub_common_1.getModel(idOrModel, requestOptions);
    }
    let pageModel;
    // fire it to get the model...
    return modelPromise
        .then((model) => {
        pageModel = model;
        // get the id's of the sites this page is linked to...
        const linkedSites = hub_common_1.mapBy("id", hub_common_1.getWithDefault(pageModel, "data.values.sites", []));
        // we need to unlink the page from all sites. However, these calls *could* fail
        // if the current user lacks rights to save the site item, so we just make sure these
        // always resolve. In the Ember service code, we used `allSettled` but that's RSVP special sauce
        const failSafeUnlink = hub_common_1.failSafe(unlink_site_and_page_1.unlinkSiteAndPage);
        return Promise.all(linkedSites.map((siteId) => {
            const opts = Object.assign({
                pageModel,
                siteId,
            }, requestOptions);
            return failSafeUnlink(opts);
        }));
    })
        .then(() => {
        return hub_common_1.unprotectModel(pageModel, requestOptions);
    })
        .then(() => {
        const opts = Object.assign({ id: pageModel.item.id }, requestOptions);
        return arcgis_rest_portal_1.removeItem(opts);
    });
}
exports.removePage = removePage;
//# sourceMappingURL=remove-page.js.map