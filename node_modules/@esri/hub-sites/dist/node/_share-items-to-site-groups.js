"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.shareItemsToSiteGroups = exports._shareItemsToSiteGroups = void 0;
const hub_common_1 = require("@esri/hub-common");
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const _get_second_pass_sharing_options_1 = require("./_get-second-pass-sharing-options");
const _get_sharing_eligible_models_1 = require("./_get-sharing-eligible-models");
/**
 * Share all the other models to the Site's content and collaboration groups, if
 * those groups were created for the site (depends on user's privs)
 * **DEPRECATED: Use shareItemsToSiteGroups() instead**
 * @param {object} siteModel Site Model
 * @param {Array} solutionModels Array of all models created by the Solution
 * @param {IHubRequestOptions} hubRequestOptions
 * @private
 */
function _shareItemsToSiteGroups(siteModel, solutionModels, hubRequestOptions) {
    /* tslint:disable no-console */
    console.info(`DEPRECATED: _shareItemsToSiteGroups will be removed at v10.0.0. Use shareItemsToSiteGroups instead.`);
    return shareItemsToSiteGroups(siteModel, solutionModels, hubRequestOptions);
}
exports._shareItemsToSiteGroups = _shareItemsToSiteGroups;
/**
 * Share all the other models to the Site's content and collaboration groups, if
 * those groups were created for the site (depends on user's privs)
 * @param {object} siteModel Site Model
 * @param {Array} solutionModels Array of all models created by the Solution
 * @param {IHubRequestOptions} hubRequestOptions
 * @exported
 */
function shareItemsToSiteGroups(siteModel, solutionModels, hubRequestOptions) {
    // Create Fail-safe version of share b/c this is not critical
    const failSafeShare = hub_common_1.failSafe(arcgis_rest_portal_1.shareItemWithGroup, { success: true });
    const groupsToShareTo = _get_second_pass_sharing_options_1._getSecondPassSharingOptions(siteModel);
    // share all items in the solution to the groups, excluding the the site, form
    // and any form feature services
    return _get_sharing_eligible_models_1._getSharingEligibleModels(siteModel, solutionModels, hubRequestOptions).then((eligibleModels) => Promise.all(eligibleModels.reduce((acc, m) => {
        const itemSharePromises = groupsToShareTo.map((g) => {
            const opts = {
                id: m.item.id,
                groupId: g.id,
                confirmItemControl: g.confirmItemControl,
                authentication: hubRequestOptions.authentication,
            };
            return failSafeShare(opts);
        });
        return acc.concat(itemSharePromises);
    }, [])));
}
exports.shareItemsToSiteGroups = shareItemsToSiteGroups;
//# sourceMappingURL=_share-items-to-site-groups.js.map