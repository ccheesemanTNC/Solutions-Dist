"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeSite = void 0;
const hub_common_1 = require("@esri/hub-common");
const unlink_pages_from_site_1 = require("./unlink-pages-from-site");
const _remove_site_groups_1 = require("./_remove-site-groups");
const _remove_parent_initiative_1 = require("./_remove-parent-initiative");
const _remove_site_domains_1 = require("./_remove-site-domains");
const _remove_site_from_index_1 = require("./_remove-site-from-index");
/**
 * Remove a Site Item
 * * Unlinks all pages
 * * removes all groups
 * * deletes any parent initiatve
 * * removes site from hub index,
 * * removes all domains associated with the site
 * * removes the site item
 *
 * @param {string || Object} idOrModel Id of the site or a site model
 * @param {IHubUserRequestOptions} hubRequestOptions
 */
function removeSite(idOrModel, hubRequestOptions) {
    let modelPromise;
    if (typeof idOrModel === "string") {
        modelPromise = hub_common_1.getModel(idOrModel, hubRequestOptions);
    }
    else {
        modelPromise = Promise.resolve(idOrModel);
    }
    let siteModel;
    return modelPromise
        .then((model) => {
        siteModel = model;
        return unlink_pages_from_site_1.unlinkPagesFromSite(siteModel, hubRequestOptions);
    })
        .then(() => {
        const opts = Object.assign({ id: siteModel.item.id, owner: siteModel.item.owner }, hubRequestOptions);
        return hub_common_1._unprotectAndRemoveItem(opts);
    })
        .then(() => {
        // remove the groups
        return _remove_site_groups_1._removeSiteGroups(siteModel, hubRequestOptions);
    })
        .then(() => {
        // remove the parent initiative if that's a thing
        return _remove_parent_initiative_1._removeParentInitiative(siteModel, hubRequestOptions);
    })
        .then(() => {
        // remove the domains associated with the site item
        return _remove_site_domains_1._removeSiteDomains(siteModel.item.id, hubRequestOptions);
    })
        .then(() => {
        // remove the site from the Hub index
        // failSafe because this is not critical
        return hub_common_1.failSafe(_remove_site_from_index_1._removeSiteFromIndex, { success: true })(siteModel, hubRequestOptions);
    })
        .catch((err) => {
        throw Error(`removeSite: Error removing site: ${err}`);
    });
}
exports.removeSite = removeSite;
//# sourceMappingURL=remove-site.js.map