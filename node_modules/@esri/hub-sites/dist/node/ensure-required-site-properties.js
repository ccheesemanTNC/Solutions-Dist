"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureRequiredSiteProperties = void 0;
const hub_common_1 = require("@esri/hub-common");
const _get_portal_domain_type_keyword_1 = require("./_get-portal-domain-type-keyword");
const _ensure_type_and_tags_1 = require("./_ensure-type-and-tags");
const site_ui_version_1 = require("./site-ui-version");
/**
 * Enture that the site model has all the required properties
 * and force them to be bumped to all the current values.
 * Returns a clone of the model
 * @param {Object} model Site Model
 * @param {Object} currentUser Current User
 * @param {Boolean} isPortal Is this running in ArcGIS Enterprise
 */
function ensureRequiredSiteProperties(model, username, isPortal = false) {
    model = hub_common_1.cloneObject(model);
    model.item.owner = username;
    model.item.access = "private";
    // ensure typekeywords array
    if (!Array.isArray(model.item.typeKeywords)) {
        model.item.typeKeywords = [];
    }
    model.data.values.updatedAt = new Date().toISOString();
    model.data.values.updatedBy = username;
    if (isPortal) {
        model.item.typeKeywords.push(_get_portal_domain_type_keyword_1._getPortalDomainTypeKeyword(model.data.values.subdomain));
    }
    // Handle item url - if it's set...
    if (!model.item.url) {
        const hostname = hub_common_1.getProp(model, "data.values.customHostname") ||
            hub_common_1.getProp(model, "data.values.defaultHostname");
        // unless a custom hostname was passed in AND the site item's url is falsey
        // (which currently should be impossible) we want the protocol of the item url
        // to be https.
        let protocol = "https";
        if (model.data.values.customHostname) {
            protocol = "http";
        }
        model.item.url = `${protocol}://${hostname}`;
    }
    // Ensure pages is an array...
    if (!Array.isArray(hub_common_1.getProp(model, "data.values.pages"))) {
        hub_common_1.deepSet(model, "data.values.pages", []);
    }
    hub_common_1.deepSet(model, "data.values.uiVersion", site_ui_version_1.SITE_UI_VERSION);
    // ensure the type and tags...
    model = _ensure_type_and_tags_1._ensureTypeAndTags(model, isPortal);
    // ensure the capabilities...
    const caps = [
        "api_explorer",
        "pages",
        "my_data",
        "social_logins",
        "json_chart_card",
        "document_iframes",
        "items_view",
        "app_page",
        "underlinedLinks",
        "globalNav",
    ];
    if (!isPortal) {
        caps.push("socialSharing");
    }
    hub_common_1.deepSet(model, "data.values.capabilities", caps);
    // return the clone
    return model;
}
exports.ensureRequiredSiteProperties = ensureRequiredSiteProperties;
//# sourceMappingURL=ensure-required-site-properties.js.map