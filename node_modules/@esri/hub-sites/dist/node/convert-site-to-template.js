"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertSiteToTemplate = void 0;
const hub_common_1 = require("@esri/hub-common");
const get_site_item_type_1 = require("./get-site-item-type");
const site_schema_version_1 = require("./site-schema-version");
const layout_1 = require("./layout");
const get_site_dependencies_1 = require("./get-site-dependencies");
const _draft_resource_regex_1 = require("./drafts/_draft-resource-regex");
/**
 * Convert an existing site into the Solution template format
 * @param {Object} model Site Model
 * @param {IHubRequestOptions} hubRequestOptions
 */
function convertSiteToTemplate(model, hubRequestOptions) {
    // clone it...
    const tmpl = hub_common_1.cloneObject(model);
    // Ensure some properties are set correctly
    tmpl.type = get_site_item_type_1.getSiteItemType(hubRequestOptions.isPortal);
    tmpl.key = `${hub_common_1.propifyString(model.item.title)}_${hub_common_1.createId("i")}`;
    tmpl.itemId = model.item.id;
    // now pass the item off to be normalized
    tmpl.item = hub_common_1.normalizeSolutionTemplateItem(tmpl.item);
    // remove the url as it will be set when it's created
    delete tmpl.item.url;
    // Note: We do not template in the various team groups
    // When a site is created from a template, those properties
    // will be injected as needed
    tmpl.item.properties = {
        schemaVersion: site_schema_version_1.SITE_SCHEMA_VERSION,
        children: [],
    };
    // inject interpolation propertues where we need them
    tmpl.item.title = "{{solution.title}}";
    tmpl.data.values.subdomain = "{{solution.subdomain}}";
    tmpl.data.values.defaultHostname = "{{solution.defaultHostname}}";
    tmpl.data.values.title = "{{solution.title}}";
    tmpl.data.values.subdomain = "{{solution.subdomain}}";
    tmpl.data.values.defaultHostname = "{{solution.defaultHostname}}";
    delete tmpl.data.catalog;
    // teams are set explicitly vs being interpolated
    delete tmpl.data.values.collaborationGroupId;
    // some props need to be reset to empty strings
    ["updatedAt", "updatedBy", "clientId", "siteId"].forEach((p) => {
        tmpl.data.values[p] = "";
    });
    // others we should just delete
    [
        "customHostname",
        "externalUrl",
        "contentGroupId",
        "followersGroupId",
        "groups",
    ].forEach((p) => {
        delete tmpl.data.values[p];
    });
    // update the default extent...
    if (hub_common_1.getProp(tmpl, "data.values.defaultExtent")) {
        tmpl.data.values.defaultExtent = "{{organization.defaultExtent}}";
    }
    if (hub_common_1.getProp(tmpl, "data.values.map.basemaps.primary.extent")) {
        tmpl.data.values.map.basemaps.primary.extent =
            "{{organization.defaultExtent}}";
    }
    // convert the layout...
    const layoutConversion = layout_1.convertLayoutToTemplate(tmpl.data.values.layout);
    tmpl.data.values.layout = layoutConversion.layout;
    // convert any internal references in /data to the item's id into `{{appId}}`
    tmpl.data = hub_common_1.replaceItemId(tmpl.data, tmpl.itemId);
    tmpl.dependencies = get_site_dependencies_1.getSiteDependencies(model);
    return hub_common_1.getItemAssets(model.item, hubRequestOptions).then((assets) => {
        // Because we don't want to include the draft resource when clone a site
        // we are filtering out assets that are not 'draft-{timestamp}.json'
        tmpl.assets = assets.filter((asset) => asset.name.search(_draft_resource_regex_1.DRAFT_RESOURCE_REGEX) === -1);
        return tmpl;
    });
}
exports.convertSiteToTemplate = convertSiteToTemplate;
//# sourceMappingURL=convert-site-to-template.js.map