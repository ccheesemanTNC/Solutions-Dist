"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateSiteApplicationUris = void 0;
const hub_common_1 = require("@esri/hub-common");
const hub_common_2 = require("@esri/hub-common");
const update_app_redirect_uris_1 = require("./update-app-redirect-uris");
/**
 * Update the list of valid uris associated with the Site item
 * @param {Object} site Site Model
 * @param {Array} uris Array of valid uris for the site
 * @param {IHubRequestOptions} hubRequestOptions
 */
function updateSiteApplicationUris(site, uris, hubRequestOptions) {
    if (hubRequestOptions.isPortal)
        return Promise.resolve({});
    // get http and https versions of all uris
    const redirectUris = uris.reduce((acc, uri) => {
        return acc.concat(hub_common_1._getHttpAndHttpsUris(uri));
    }, []);
    // update the redirect uris for the application
    return update_app_redirect_uris_1.updateAppRedirectUris(site.data.values.clientId, redirectUris, hubRequestOptions)
        .then(() => {
        // now we update the domains, removing any that are no longer used
        return hub_common_2.getDomainsForSite(site.item.id, hubRequestOptions);
    })
        .then((domainInfos) => {
        // get all domains that are no longer associated with the site
        const domainsToRemove = domainInfos.filter((domain) => !hub_common_1.includes(uris, domain.hostname));
        // get all new domains that are now associated with the site
        const hostnames = domainInfos.map((domain) => domain.hostname);
        const domainsToAdd = uris.filter((uri) => !hub_common_1.includes(hostnames, uri));
        // finally, kick all the promises
        const domainPromises = [];
        domainsToRemove.forEach((domain) => domainPromises.push(hub_common_2.removeDomain(domain.id, hubRequestOptions)));
        domainsToAdd.forEach((uri) => domainPromises.push(hub_common_2.addDomain({
            orgKey: hubRequestOptions.portalSelf.urlKey,
            orgId: hubRequestOptions.portalSelf.id,
            orgTitle: hubRequestOptions.portalSelf.name,
            hostname: uri,
            siteId: site.item.id,
            siteTitle: site.item.title,
            clientKey: site.data.values.clientId,
            sslOnly: domainInfos[0] ? !!domainInfos[0].sslOnly : true,
        }, hubRequestOptions)));
        return Promise.all(domainPromises);
    });
}
exports.updateSiteApplicationUris = updateSiteApplicationUris;
//# sourceMappingURL=update-site-application-uris.js.map