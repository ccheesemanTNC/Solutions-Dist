"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMembers = void 0;
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
const hub_common_1 = require("@esri/hub-common");
// TODO: once the Hub API User Search is complete, integrate
// it in this function for AGO users, and fallback to the
// current implementation for enterprise users
/**
 * Fetches and returns members given a list of usernames
 *
 * NOTE: AGO's user search endpoint is only available to
 * authenticated users; however, since unauthenticated users
 * should still be able to access public profiles, we support
 * fetching members for both unauthenticated/authenticated
 * users in this function
 *
 * @param {string[]} usernames List of usernames to search for
 * @param {object} requestOptions IHubRequestOptions
 */
function getMembers(usernames, requestOptions) {
    return requestOptions.authentication
        ? authenticatedGetMembers(usernames, requestOptions)
        : unauthenticatedGetMembers(usernames, requestOptions);
}
exports.getMembers = getMembers;
/**
 * groups the provided usernames in chunks of 100 and creates query
 * strings to batch fetch those members from AGO's user search
 * (/community/users) endpoint. AGO will only return the subset of
 * members which the current user has access to.
 *
 * @param {Array} usernames List of usernames to search for
 * @param {object} requestOptions IHubRequestOptions
 */
function authenticatedGetMembers(usernames, requestOptions) {
    const urlPath = `${hub_common_1.getPortalUrl(requestOptions)}/sharing/rest/community/users`;
    const chunkSize = 100;
    const chunkedUsernames = [];
    for (let i = 0; i < usernames.length; i += chunkSize) {
        chunkedUsernames.push(usernames.slice(i, i + chunkSize));
    }
    const chunkedOptions = chunkedUsernames.map(chunk => {
        const q = chunk.map(username => `username:${username}`).join(" OR ");
        return {
            urlPath,
            requestOptions: Object.assign({ params: { q, num: chunk.length } }, requestOptions)
        };
    });
    return hub_common_1.batch(chunkedOptions, batchMemberRequest).then(batchedMembers => {
        return batchedMembers.reduce((flat, toFlatten) => {
            return flat.concat(toFlatten);
        }, []);
    });
}
/**
 * fetch members individually from AGO's /community/users/{username}
 * endpoint. This endpoint, unlike the users search endpoint which
 * only returns the subset of members that the current user has acces
 * to, will only limit the information returned for each member
 * (i.e. firstname, lastname and fullname will be empty strings if
 * an unauthenticated user tries to access a non-public profile).
 *
 * @param {Array} usernames List of usernames to search for
 * @param {object} requestOptions IHubRequestOptions
 */
function unauthenticatedGetMembers(usernames, requestOptions) {
    return Promise.all(usernames.map(username => {
        return arcgis_rest_portal_1.getUser(Object.assign({ username }, requestOptions))
            .then(response => {
            // if the firstname, lastname, and fullname are empty strings, assume that the
            // user is not accessible (i.e. not a public profile) and should not be returned
            // to the unauthenticated user
            if (response.firstName || response.lastName || response.fullName) {
                return response;
            }
        })
            .catch(e => {
            hub_common_1.Logger.error(`Error fetching user, ${username}, from AGO user endpoint, ${e}`);
            return null;
        });
    })).then(members => members.filter(Boolean));
}
/**
 * callback function to batch the requests to the user search endpoint
 * if >100 usernames are supplied. This is necessary because the
 * endpoint sets the maximum number of results to be included in the
 * result set response to 100
 *
 * @param options IBatchMemberRequestOptions
 */
function batchMemberRequest(options) {
    return arcgis_rest_request_1.request(options.urlPath, options.requestOptions)
        .then(response => response.results)
        .catch(e => {
        hub_common_1.Logger.error(`Error fetching members from AGO user search endpoint: ${e}`);
        return [];
    });
}
//# sourceMappingURL=get-members.js.map