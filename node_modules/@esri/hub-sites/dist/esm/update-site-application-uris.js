import { _getHttpAndHttpsUris, includes, } from "@esri/hub-common";
import { getDomainsForSite, removeDomain, addDomain, } from "@esri/hub-common";
import { updateAppRedirectUris } from "./update-app-redirect-uris";
/**
 * Update the list of valid uris associated with the Site item
 * @param {Object} site Site Model
 * @param {Array} uris Array of valid uris for the site
 * @param {IHubRequestOptions} hubRequestOptions
 */
export function updateSiteApplicationUris(site, uris, hubRequestOptions) {
    if (hubRequestOptions.isPortal)
        return Promise.resolve({});
    // get http and https versions of all uris
    var redirectUris = uris.reduce(function (acc, uri) {
        return acc.concat(_getHttpAndHttpsUris(uri));
    }, []);
    // update the redirect uris for the application
    return updateAppRedirectUris(site.data.values.clientId, redirectUris, hubRequestOptions)
        .then(function () {
        // now we update the domains, removing any that are no longer used
        return getDomainsForSite(site.item.id, hubRequestOptions);
    })
        .then(function (domainInfos) {
        // get all domains that are no longer associated with the site
        var domainsToRemove = domainInfos.filter(function (domain) { return !includes(uris, domain.hostname); });
        // get all new domains that are now associated with the site
        var hostnames = domainInfos.map(function (domain) { return domain.hostname; });
        var domainsToAdd = uris.filter(function (uri) { return !includes(hostnames, uri); });
        // finally, kick all the promises
        var domainPromises = [];
        domainsToRemove.forEach(function (domain) {
            return domainPromises.push(removeDomain(domain.id, hubRequestOptions));
        });
        domainsToAdd.forEach(function (uri) {
            return domainPromises.push(addDomain({
                orgKey: hubRequestOptions.portalSelf.urlKey,
                orgId: hubRequestOptions.portalSelf.id,
                orgTitle: hubRequestOptions.portalSelf.name,
                hostname: uri,
                siteId: site.item.id,
                siteTitle: site.item.title,
                clientKey: site.data.values.clientId,
                sslOnly: domainInfos[0] ? !!domainInfos[0].sslOnly : true,
            }, hubRequestOptions));
        });
        return Promise.all(domainPromises);
    });
}
//# sourceMappingURL=update-site-application-uris.js.map