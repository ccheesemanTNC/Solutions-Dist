import { __assign } from "tslib";
import { getUser } from "@esri/arcgis-rest-portal";
import { request } from "@esri/arcgis-rest-request";
import { getPortalUrl, Logger, batch } from "@esri/hub-common";
// TODO: once the Hub API User Search is complete, integrate
// it in this function for AGO users, and fallback to the
// current implementation for enterprise users
/**
 * Fetches and returns members given a list of usernames
 *
 * NOTE: AGO's user search endpoint is only available to
 * authenticated users; however, since unauthenticated users
 * should still be able to access public profiles, we support
 * fetching members for both unauthenticated/authenticated
 * users in this function
 *
 * @param {string[]} usernames List of usernames to search for
 * @param {object} requestOptions IHubRequestOptions
 */
export function getMembers(usernames, requestOptions) {
    return requestOptions.authentication
        ? authenticatedGetMembers(usernames, requestOptions)
        : unauthenticatedGetMembers(usernames, requestOptions);
}
/**
 * groups the provided usernames in chunks of 100 and creates query
 * strings to batch fetch those members from AGO's user search
 * (/community/users) endpoint. AGO will only return the subset of
 * members which the current user has access to.
 *
 * @param {Array} usernames List of usernames to search for
 * @param {object} requestOptions IHubRequestOptions
 */
function authenticatedGetMembers(usernames, requestOptions) {
    var urlPath = getPortalUrl(requestOptions) + "/sharing/rest/community/users";
    var chunkSize = 100;
    var chunkedUsernames = [];
    for (var i = 0; i < usernames.length; i += chunkSize) {
        chunkedUsernames.push(usernames.slice(i, i + chunkSize));
    }
    var chunkedOptions = chunkedUsernames.map(function (chunk) {
        var q = chunk.map(function (username) { return "username:" + username; }).join(" OR ");
        return {
            urlPath: urlPath,
            requestOptions: __assign({ params: { q: q, num: chunk.length } }, requestOptions)
        };
    });
    return batch(chunkedOptions, batchMemberRequest).then(function (batchedMembers) {
        return batchedMembers.reduce(function (flat, toFlatten) {
            return flat.concat(toFlatten);
        }, []);
    });
}
/**
 * fetch members individually from AGO's /community/users/{username}
 * endpoint. This endpoint, unlike the users search endpoint which
 * only returns the subset of members that the current user has acces
 * to, will only limit the information returned for each member
 * (i.e. firstname, lastname and fullname will be empty strings if
 * an unauthenticated user tries to access a non-public profile).
 *
 * @param {Array} usernames List of usernames to search for
 * @param {object} requestOptions IHubRequestOptions
 */
function unauthenticatedGetMembers(usernames, requestOptions) {
    return Promise.all(usernames.map(function (username) {
        return getUser(__assign({ username: username }, requestOptions))
            .then(function (response) {
            // if the firstname, lastname, and fullname are empty strings, assume that the
            // user is not accessible (i.e. not a public profile) and should not be returned
            // to the unauthenticated user
            if (response.firstName || response.lastName || response.fullName) {
                return response;
            }
        })
            .catch(function (e) {
            Logger.error("Error fetching user, " + username + ", from AGO user endpoint, " + e);
            return null;
        });
    })).then(function (members) { return members.filter(Boolean); });
}
/**
 * callback function to batch the requests to the user search endpoint
 * if >100 usernames are supplied. This is necessary because the
 * endpoint sets the maximum number of results to be included in the
 * result set response to 100
 *
 * @param options IBatchMemberRequestOptions
 */
function batchMemberRequest(options) {
    return request(options.urlPath, options.requestOptions)
        .then(function (response) { return response.results; })
        .catch(function (e) {
        Logger.error("Error fetching members from AGO user search endpoint: " + e);
        return [];
    });
}
//# sourceMappingURL=get-members.js.map