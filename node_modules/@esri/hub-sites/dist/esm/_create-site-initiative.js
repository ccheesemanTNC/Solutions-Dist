import { without, interpolate, getProp } from "@esri/hub-common";
import { getInitiativeTemplate, addInitiative } from "@esri/hub-initiatives";
import { shareItemWithGroup } from "@esri/arcgis-rest-portal";
/**
 * Given a Site Template, locate the initiative template
 * then adlib it and create the initiative item
 * @param {object} siteTemplate Site Template
 * @param {object} settings adlib interpolation hash
 * @param {object} transforms adlib transforms hash
 * @param {IHubRequestOptions}} hubRequestOptions
 * @private
 */
export function _createSiteInitiative(siteTemplate, settings, transforms, hubRequestOptions) {
    var cache = {};
    return getInitiativeTemplate(siteTemplate, hubRequestOptions)
        .then(function (initiativeTemplate) {
        // set the url that will be in the site
        initiativeTemplate.item.url = settings.solution.url;
        initiativeTemplate.item.title = settings.solution.title;
        initiativeTemplate.item.owner = hubRequestOptions.authentication.username;
        initiativeTemplate.item.typeKeywords = without(initiativeTemplate.item.typeKeywords, "Hub Initiative Template");
        initiativeTemplate.item.type = "Hub Initiative";
        // set the teams...
        Object.assign(initiativeTemplate.item.properties, settings.teams);
        // adlib to pick up anything else...
        var initiativeModel = interpolate(initiativeTemplate, settings, transforms);
        // and save it
        return addInitiative(initiativeModel, hubRequestOptions);
    })
        .then(function (model) {
        // hold in cache
        cache.model = model;
        // default to a success response
        var sharePrms = Promise.resolve({ success: true });
        // share it to the collab team if that got created
        var collabGroupId = getProp(settings, "teams.collaborationGroupId");
        if (collabGroupId) {
            sharePrms = shareItemWithGroup({
                id: model.item.id,
                groupId: collabGroupId,
                authentication: hubRequestOptions.authentication,
                confirmItemControl: true
            });
        }
        return sharePrms;
    })
        .then(function (_) {
        return cache.model;
    })
        .catch(function (ex) {
        throw Error("site-utils::_createSiteInitiative Error " + ex);
    });
}
//# sourceMappingURL=_create-site-initiative.js.map