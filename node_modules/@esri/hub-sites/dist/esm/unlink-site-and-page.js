import { getModelFromOptions, withoutByProp, getWithDefault, maybePush, getProp, failSafeUpdate, failSafe, unshareItemFromGroups } from "@esri/hub-common";
/**
 * Unlink a Page from a Site and vice-versa
 * This is a super tolerant function. It can be passed ids, models or a mix.
 * It will handle either the site or the page items being missing
 * It will handle cases where the current user lacks update privs to either item or rights
 * to change the sharing. Of course in those cases we clearly can't make the changes, and
 * this function will resolve as though they were made, usually the UI tier will have
 * ensured that the current user has write access to at least one of the main entities
 * @param {IUnlinkRequestOptions} unlinkRequestOptions {siteModel || siteId, pageModel || pageId, authorization...}
 */
export function unlinkSiteAndPage(unlinkRequestOptions) {
    var unshareGroups = [];
    var promises = [];
    var pageModel;
    var siteModel;
    var requestOptions = {
        authentication: unlinkRequestOptions.authentication
    };
    // get the models from the options...
    return Promise.all([
        getModelFromOptions("page", unlinkRequestOptions),
        getModelFromOptions("site", unlinkRequestOptions)
    ])
        .then(function (models) {
        pageModel = models[0], siteModel = models[1];
        // Handle the site
        if (!siteModel.isMissing) {
            var pages = getWithDefault(siteModel, "data.values.pages", []);
            // remove the page from the pages array on the model
            siteModel.data.values.pages = withoutByProp("id", pageModel.item.id, pages);
            // collect the groups we'll unshare the page from
            unshareGroups = maybePush(getProp(siteModel, "item.properties.collaborationGroupId"), unshareGroups);
            unshareGroups = maybePush(getProp(siteModel, "item.properties.contentGroupId"), unshareGroups);
            // update the site, but failSafe so we don't have to do any checking if the current user can update it
            promises.push(failSafeUpdate(siteModel, requestOptions));
        }
        // Handle the page
        if (!pageModel.isMissing) {
            var sites = getWithDefault(pageModel, "data.values.sites", []);
            // remove site from sites array on the model
            pageModel.data.values.sites = withoutByProp("id", siteModel.item.id, sites);
            promises.push(failSafeUpdate(pageModel, requestOptions));
            // now about the groups
            var failSafeUnshare = failSafe(unshareItemFromGroups);
            promises.push(failSafeUnshare(pageModel.item.id, unshareGroups, requestOptions));
        }
        return Promise.all(promises);
    })
        .then(function () {
        // return the updated models
        return {
            pageModel: pageModel,
            siteModel: siteModel
        };
    });
}
//# sourceMappingURL=unlink-site-and-page.js.map