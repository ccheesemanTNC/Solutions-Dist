import { getModel, mapBy, getWithDefault, failSafe, unprotectModel, } from "@esri/hub-common";
import { unlinkSiteAndPage } from "../unlink-site-and-page";
import { removeItem } from "@esri/arcgis-rest-portal";
/**
 * Remove a Page Item. This deletes the item.
 * @param {Object | String} idOrModel Model object or Item Id
 * @param {IRequestOptions} requestOptions
 */
export function removePage(idOrModel, requestOptions) {
    var modelPromise = Promise.resolve(idOrModel);
    if (typeof idOrModel === "string") {
        modelPromise = getModel(idOrModel, requestOptions);
    }
    var pageModel;
    // fire it to get the model...
    return modelPromise
        .then(function (model) {
        pageModel = model;
        // get the id's of the sites this page is linked to...
        var linkedSites = mapBy("id", getWithDefault(pageModel, "data.values.sites", []));
        // we need to unlink the page from all sites. However, these calls *could* fail
        // if the current user lacks rights to save the site item, so we just make sure these
        // always resolve. In the Ember service code, we used `allSettled` but that's RSVP special sauce
        var failSafeUnlink = failSafe(unlinkSiteAndPage);
        return Promise.all(linkedSites.map(function (siteId) {
            var opts = Object.assign({
                pageModel: pageModel,
                siteId: siteId,
            }, requestOptions);
            return failSafeUnlink(opts);
        }));
    })
        .then(function () {
        return unprotectModel(pageModel, requestOptions);
    })
        .then(function () {
        var opts = Object.assign({ id: pageModel.item.id }, requestOptions);
        return removeItem(opts);
    });
}
//# sourceMappingURL=remove-page.js.map