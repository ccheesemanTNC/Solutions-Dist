import { serializeModel, uploadResourcesFromUrl, getWithDefault } from "@esri/hub-common";
import { ensureRequiredPageProperties } from "./ensure-required-page-properties";
import { linkSiteAndPage } from "../link-site-and-page";
import { createItem, protectItem, shareItemWithGroup } from "@esri/arcgis-rest-portal";
/**
 * Given a Page model, create the item, protect it, share it, connect it to the site
 * and upload any resources.
 * @param {Object} model Page model to be created as an Item
 * @param {Object} options object containing shareTo, and space for future additions
 * @param {IHubRequestOptions} hubRequestOptions IRequestOptions object, with isPortal
 */
export function createPage(model, options, hubRequestOptions) {
    // ensure we got authentication
    if (!hubRequestOptions.authentication) {
        throw new Error("createPage must be passed hubRequestOptions.authentication");
    }
    // ensure props
    var newPage = ensureRequiredPageProperties(model, {
        username: hubRequestOptions.authentication.username,
        isPortal: hubRequestOptions.isPortal
    });
    // convert to a flat object w. .data --> .text as a json string
    var serializedModel = serializeModel(newPage);
    // create the item
    return createItem({
        item: serializedModel,
        owner: newPage.item.owner,
        authentication: hubRequestOptions.authentication
    })
        .then(function (createResponse) {
        // hold onto the Id so we can return a complete model
        newPage.item.id = createResponse.id;
        // protect it
        return protectItem({
            id: newPage.item.id,
            owner: newPage.item.owner,
            authentication: hubRequestOptions.authentication
        });
    })
        .then(function (protectReponse) {
        // share to any groups
        var sharingPromises = [];
        if (Array.isArray(options.shareTo) && options.shareTo.length) {
            // map over the array sharing the item to all groups
            sharingPromises = options.shareTo.map(function (groupInfo) {
                return shareItemWithGroup({
                    id: newPage.item.id,
                    groupId: groupInfo.id,
                    authentication: hubRequestOptions.authentication,
                    confirmItemControl: groupInfo.confirmItemControl || false
                });
            });
            newPage.item.access = "shared";
        }
        return Promise.all(sharingPromises);
    })
        .then(function (response) {
        // link page to sites
        var sites = getWithDefault(newPage, "data.values.sites", []);
        var requestOptions = {
            authentication: hubRequestOptions.authentication
        };
        return Promise.all(sites.map(function (entry) {
            var opts = Object.assign({
                siteId: entry.id,
                pageModel: newPage
            }, requestOptions);
            return linkSiteAndPage(opts);
        }));
    })
        .then(function (siteLinkingResponse) {
        // upload resources
        var assets = getWithDefault(options, "assets", []);
        return uploadResourcesFromUrl(newPage, assets, hubRequestOptions);
    })
        .then(function () { return newPage; })
        .catch(function (err) {
        throw Error("createPage: Error creating page: " + err);
    });
}
//# sourceMappingURL=create-page.js.map