import { serializeModel, cloneObject, interpolateItemId, uploadResourcesFromUrl, getProp, addSiteDomains, registerSiteAsApplication, } from "@esri/hub-common";
import { ensureRequiredSiteProperties } from "./ensure-required-site-properties";
import { createItem, protectItem, updateItem, shareItemWithGroup, } from "@esri/arcgis-rest-portal";
import { updateInitiativeSiteId } from "@esri/hub-initiatives";
/**
 * Create a New Site
 * Creates and protects the site item
 * Uploads any assets/thumbnails passed in via options.assets array
 * If not portal..,
 * - register the site as an application, w/ needed redirect uris
 * - register the domains with the Hub Domain Service
 * @param {Object} model Site Model to create
 * @param {Object} options options hash. Key prop is assets
 * @param {IHubRequestOptions} hubRequestOptions
 */
export function createSite(model, options, hubRequestOptions) {
    // ensure properties
    model = ensureRequiredSiteProperties(model, hubRequestOptions.authentication.username, hubRequestOptions.isPortal);
    // create the item
    return createItem({
        item: serializeModel(model),
        owner: model.item.owner,
        authentication: hubRequestOptions.authentication,
    })
        .then(function (createResponse) {
        // hold onto the Id so we can return a complete model
        model.item.id = createResponse.id;
        // protect it
        return protectItem({
            id: model.item.id,
            owner: model.item.owner,
            authentication: hubRequestOptions.authentication,
        });
    })
        .then(function (protectResponse) {
        // do app registration
        return registerSiteAsApplication(model, hubRequestOptions);
    })
        .then(function (appRegistrationResponse) {
        // store the clientId
        model.data.values.clientId = appRegistrationResponse.client_id;
        // If we have a dcat section, hoist it out as it may contain complex adlib
        // templates that are needed at run-time
        // If we have data.values.dcatConfig, yank it off b/c that may have adlib template stuff in it
        var dcatConfig = cloneObject(model.data.values.dcatConfig);
        delete model.data.values.dcatConfig;
        // with the id of the actual item
        model = interpolateItemId(model);
        // re-attach if we got anything...
        if (dcatConfig) {
            model.data.values.dcatConfig = dcatConfig;
        }
        return updateItem({
            item: serializeModel(model),
            authentication: hubRequestOptions.authentication,
        });
    })
        .then(function (updateResponse) {
        // Handle domains
        return addSiteDomains(model, hubRequestOptions);
    })
        .then(function (domainResponses) {
        // upload resources from url
        return uploadResourcesFromUrl(model, options.assets || [], hubRequestOptions);
    })
        .then(function (uploadResponses) {
        // default to a success response
        var sharePrms = Promise.resolve({ success: true });
        // share it to the collab team if that got created
        var collabGroupId = getProp(model, "item.properties.collaborationGroupId");
        if (collabGroupId) {
            sharePrms = shareItemWithGroup({
                id: model.item.id,
                groupId: collabGroupId,
                authentication: hubRequestOptions.authentication,
                confirmItemControl: true,
            });
        }
        return sharePrms;
    })
        .then(function (resp) {
        // if we created an initiative, ensure we inject the site Id into it
        var initiativeItemId = getProp(model, "item.properties.parentInitiativeId");
        if (initiativeItemId) {
            // get the item and update it
            return updateInitiativeSiteId(initiativeItemId, model.item.id, hubRequestOptions);
        }
        else {
            return Promise.resolve(true);
        }
    })
        .then(function (resp) {
        return model;
    })
        .catch(function (err) {
        throw Error("site-utils::createSite - Error creating site " + JSON.stringify(err));
    });
}
//# sourceMappingURL=create-site.js.map