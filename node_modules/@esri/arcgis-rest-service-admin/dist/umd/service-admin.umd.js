/* @preserve
* @esri/arcgis-rest-service-admin - v3.4.3 - Apache-2.0
* Copyright (c) 2017-2021 Esri, Inc.
* Fri Oct 29 2021 14:49:40 GMT-0600 (Mountain Daylight Time)
*/
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@esri/arcgis-rest-request'), require('@esri/arcgis-rest-portal')) :
    typeof define === 'function' && define.amd ? define(['exports', '@esri/arcgis-rest-request', '@esri/arcgis-rest-portal'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.arcgisRest = global.arcgisRest || {}, global.arcgisRest, global.arcgisRest));
}(this, (function (exports, arcgisRestRequest, arcgisRestPortal) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import {
     *   createFeatureService,
     *   addToServiceDefinition
     * } from '@esri/arcgis-rest-service-admin';
     * //
     * createFeatureService({
     *   authentication: userSession,
     *   item: {
     *     "name": "NewEmptyService",
     *     "capabilities": "Create,Delete,Query,Update,Editing"
     *   }
     * });
     * ```
     * Create a new [hosted feature service](https://developers.arcgis.com/rest/users-groups-and-items/create-service.htm). After the service has been created, call [`addToServiceDefinition()`](../addToServiceDefinition/) if you'd like to update it's schema.
     * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.
     * @returns A Promise that resolves with service details once the service has been created
     */
    function createFeatureService(requestOptions) {
        return arcgisRestPortal.determineOwner(requestOptions).then(function (owner) {
            var options = __assign(__assign({}, requestOptions), { rawResponse: false });
            var baseUrl = arcgisRestPortal.getPortalUrl(requestOptions) + "/content/users/" + owner;
            var folder = (!options.folderId || options.folderId === "/") ? "" : "/" + options.folderId;
            var url = "" + baseUrl + folder + "/createService";
            // Create the service
            options.params = __assign({ createParameters: options.item, outputType: "featureService" }, options.params);
            return arcgisRestRequest.request(url, options);
        });
    }

    /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { addToServiceDefinition } from '@esri/arcgis-rest-service-admin';
     * //
     * addToServiceDefinition(serviceurl, {
     *   authentication: userSession,
     *   layers: [],
     *   tables: []
     * });
     * ```
     * Add layer(s) and/or table(s) to a hosted feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/add-to-definition-feature-service-.htm) for more information.
     *
     * @param url - URL of feature service
     * @param requestOptions - Options for the request
     * @returns A Promise that resolves with service layer and/or table details once the definition
     * has been updated
     */
    function addToServiceDefinition(url, requestOptions) {
        var adminUrl = arcgisRestRequest.cleanUrl(url).replace("/rest/services", "/rest/admin/services") + "/addToDefinition";
        requestOptions.params = __assign({ addToDefinition: {} }, requestOptions.params);
        if (requestOptions.layers && requestOptions.layers.length > 0) {
            requestOptions.params.addToDefinition.layers = requestOptions.layers;
        }
        if (requestOptions.tables && requestOptions.tables.length > 0) {
            requestOptions.params.addToDefinition.tables = requestOptions.tables;
        }
        return arcgisRestRequest.request(adminUrl, requestOptions);
    }

    /* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * ```js
     * import { updateServiceDefinition } from '@esri/arcgis-rest-service-admin';
     * //
     * updateServiceDefinition(serviceurl, {
     *   authentication: userSession,
     *   updateDefinition: serviceDefinition
     * });
     * ```
     * Update a definition property in a hosted feature service. See the [REST Documentation](https://developers.arcgis.com/rest/services-reference/update-definition-feature-service-.htm) for more information.
     *
     * @param url - URL of feature service
     * @param requestOptions - Options for the request
     * @returns A Promise that resolves with success or error
     */
    function updateServiceDefinition(url, requestOptions) {
        var adminUrl = arcgisRestRequest.cleanUrl(url).replace("/rest/services", "/rest/admin/services") + "/updateDefinition";
        requestOptions.params = __assign({ updateDefinition: {} }, requestOptions.params);
        if (requestOptions.updateDefinition) {
            requestOptions.params.updateDefinition = requestOptions.updateDefinition;
        }
        return arcgisRestRequest.request(adminUrl, requestOptions);
    }

    /* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * Given a Feature Service url, fetch the service admin information.
     *
     * The response from this call includes all the detailed information
     * for each layer/table in the service as well as some admin properties
     *
     * @export
     * @param {string} serviceUrl
     * @param {UserSession} session
     * @return {*}  {Promise<IServiceInfo>}
     */
    function getServiceAdminInfo(serviceUrl, session) {
        var serviceAdminUrl = serviceUrl.replace("/rest/services", "/rest/admin/services");
        return arcgisRestRequest.request(serviceAdminUrl, {
            authentication: session,
            params: {
                f: "json",
            },
        });
    }

    /* Copyright (c) 2018-2020 Environmental Systems Research Institute, Inc.
     * Apache-2.0 */
    /**
     * Return the sources response for a view service item
     *
     * @param {string} viewServiceUrl
     * @param {UserSession} session
     * @return {*}  {Promise<Record<string, unknown>>}
     */
    function getViewSources(viewServiceUrl, session) {
        return arcgisRestRequest.request(viewServiceUrl + "/sources", { authentication: session });
    }

    exports.addToServiceDefinition = addToServiceDefinition;
    exports.createFeatureService = createFeatureService;
    exports.getServiceAdminInfo = getServiceAdminInfo;
    exports.getViewSources = getViewSources;
    exports.updateServiceDefinition = updateServiceDefinition;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=service-admin.umd.js.map
