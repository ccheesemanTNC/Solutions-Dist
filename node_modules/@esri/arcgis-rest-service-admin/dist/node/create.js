"use strict";
/* Copyright (c) 2018-2019 Environmental Systems Research Institute, Inc.
 * Apache-2.0 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createFeatureService = void 0;
var tslib_1 = require("tslib");
var arcgis_rest_request_1 = require("@esri/arcgis-rest-request");
var arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
/**
 * ```js
 * import {
 *   createFeatureService,
 *   addToServiceDefinition
 * } from '@esri/arcgis-rest-service-admin';
 * //
 * createFeatureService({
 *   authentication: userSession,
 *   item: {
 *     "name": "NewEmptyService",
 *     "capabilities": "Create,Delete,Query,Update,Editing"
 *   }
 * });
 * ```
 * Create a new [hosted feature service](https://developers.arcgis.com/rest/users-groups-and-items/create-service.htm). After the service has been created, call [`addToServiceDefinition()`](../addToServiceDefinition/) if you'd like to update it's schema.
 * @param requestOptions - Options for the request. NOTE: `rawResponse` is not supported by this operation.
 * @returns A Promise that resolves with service details once the service has been created
 */
function createFeatureService(requestOptions) {
    return arcgis_rest_portal_1.determineOwner(requestOptions).then(function (owner) {
        var options = tslib_1.__assign(tslib_1.__assign({}, requestOptions), { rawResponse: false });
        var baseUrl = arcgis_rest_portal_1.getPortalUrl(requestOptions) + "/content/users/" + owner;
        var folder = (!options.folderId || options.folderId === "/") ? "" : "/" + options.folderId;
        var url = "" + baseUrl + folder + "/createService";
        // Create the service
        options.params = tslib_1.__assign({ createParameters: options.item, outputType: "featureService" }, options.params);
        return arcgis_rest_request_1.request(url, options);
    });
}
exports.createFeatureService = createFeatureService;
//# sourceMappingURL=create.js.map