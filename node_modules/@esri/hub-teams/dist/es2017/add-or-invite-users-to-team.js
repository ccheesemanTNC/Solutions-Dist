import { addOrInviteCommunityUsers, addOrInviteOrgUsers, addOrInviteWorldUsers, addOrInvitePartneredUsers, addOrInviteCollaborationCoordinators, groupUsersByOrgRelationship, } from "./utils";
/**
 * Add or invite N users to a single team
 * Org|community|world logic flows are run even if there are no users applicable for that particular path.
 * Results from each path are consolidated and surfaced in the return object as failures and errors are of
 * more importance than successes.
 *
 * @export
 * @param {string} groupId Group we are adding users to
 * @param {IUserWithOrgType[]} users array of users to add
 * @param {IAuthenticationManager} primaryRO primary requestOptions
 * @param {boolean} canAutoAddUser Can we automatically add a user to the team?
 * @param {boolean} addUserAsGroupAdmin Should the user be added as a group administrator
 * @param {IAddOrInviteEmail} email Email object
 * @return {IAddOrInviteToTeamResult} Result object
 */
export async function addOrInviteUsersToTeam(groupId, users, primaryRO, canAutoAddUser, addUserAsGroupAdmin, email) {
    // Group users by their org relationship
    const parsedUsers = groupUsersByOrgRelationship(users);
    // build up params for the context
    const inputParams = {
        groupId,
        primaryRO,
        allUsers: users,
        canAutoAddUser,
        addUserAsGroupAdmin,
        email,
    };
    // create context from params and parsed users
    const context = Object.assign(inputParams, parsedUsers);
    // result obj by org relationship
    const result = {
        community: await addOrInviteCommunityUsers(context),
        org: await addOrInviteOrgUsers(context),
        world: await addOrInviteWorldUsers(context),
        partnered: await addOrInvitePartneredUsers(context),
        collaborationCoordinator: await addOrInviteCollaborationCoordinators(context),
        notAdded: [],
        notInvited: [],
        notEmailed: [],
        errors: [],
        groupId,
    };
    // Bring not added / invited / emailed / errors up to the top level
    result.notAdded = [
        ...result.community.notAdded,
        ...result.org.notAdded,
        ...result.world.notAdded,
    ];
    result.notInvited = [
        ...result.community.notInvited,
        ...result.org.notInvited,
        ...result.world.notInvited,
    ];
    result.notEmailed = [
        ...result.community.notEmailed,
        ...result.org.notEmailed,
        ...result.world.notEmailed,
    ];
    result.errors = [
        ...result.community.errors,
        ...result.org.errors,
        ...result.world.errors,
    ];
    return result;
}
//# sourceMappingURL=add-or-invite-users-to-team.js.map