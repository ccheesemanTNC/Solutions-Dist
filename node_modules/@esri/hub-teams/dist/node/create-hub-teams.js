"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHubTeams = void 0;
const hub_common_1 = require("@esri/hub-common");
const get_user_creatable_teams_1 = require("./utils/get-user-creatable-teams");
const _create_team_groups_1 = require("./utils/_create-team-groups");
/**
 * Create all the groups (aka Teams) required for a Site or Initiative
 * The group names are derived from the Site/Initiative title. Group names
 * must be unique on create, so if necessary we will increment the names
 * after translation. If you need to ADD a Team to an existing Site/Initiative,
 * use the teams-service::addTeams function
 * @param {ICreateHubTeamsOptions} createHubTeamsOptions
 */
function createHubTeams(opts) {
    const { title, types, hubRequestOptions } = opts;
    const product = hub_common_1.getHubProduct(hubRequestOptions.portalSelf);
    // get all the groups that this user can create in this environment
    // and filter just the team types requested
    const subscriptionType = hub_common_1.getSubscriptionType(hubRequestOptions.portalSelf);
    const teamsToCreate = get_user_creatable_teams_1.getUserCreatableTeams(hubRequestOptions.portalSelf.user, product, hubRequestOptions.portalSelf.currentVersion, subscriptionType).filter((g) => {
        return types.indexOf(g.config.type) > -1;
    });
    // get the culture out of the
    const culture = hub_common_1.getCulture(hubRequestOptions);
    const locale = hub_common_1.convertToWellKnownLocale(culture);
    // Fire that off
    return hub_common_1.fetchHubTranslation(locale, hubRequestOptions.portalSelf)
        .then((translations) => {
        // create the team groups
        return _create_team_groups_1._createTeamGroups(title, teamsToCreate, translations, hubRequestOptions);
    })
        .catch((ex) => {
        throw Error(`Error in team-utils::createHubTeams ${ex}`);
    });
}
exports.createHubTeams = createHubTeams;
//# sourceMappingURL=create-hub-teams.js.map