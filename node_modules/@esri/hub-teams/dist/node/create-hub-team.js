"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHubTeam = void 0;
const types_1 = require("./types");
const hub_common_1 = require("@esri/hub-common");
const get_user_creatable_teams_1 = require("./utils/get-user-creatable-teams");
const _create_team_groups_1 = require("./utils/_create-team-groups");
/**
 * Create a single Team, using the same logic as creating multiple Teams.
 * Also allows a set of custom props to be passed in and applied to the team.
 *
 * This should be used PRIOR to creating Sites/Initiatives.
 * @param {ICreateHubTeamOptions} createHubTeamOptions
 */
function createHubTeam(opts) {
    const { title, type, props, hubRequestOptions } = opts;
    // validate that the type is valid...
    if (types_1.TEAMTYPES.indexOf(type) === -1) {
        throw new Error(`createHubTeam was passed ${type} which is not a valid type of team. Please send one of: ${types_1.TEAMTYPES.join(",")}`);
    }
    // get all the groups the current user can create...
    // filter just the ones that match type...
    const portalSelf = hubRequestOptions.portalSelf;
    const product = hub_common_1.getHubProduct(portalSelf);
    const subscriptionType = hub_common_1.getSubscriptionType(portalSelf);
    const groupsToCreate = get_user_creatable_teams_1.getUserCreatableTeams(portalSelf.user, product, portalSelf.currentVersion, subscriptionType)
        .filter((g) => {
        return g.config.type === type;
    })
        .map((grp) => {
        // If props are passed in, spread them over the group object, but only if type === `team`
        if (grp.config.type === "team") {
            return Object.assign({}, grp, props);
        }
        else {
            return grp;
        }
    });
    // use the locale of the current user, or en-us as a fall-back
    const culture = hub_common_1.getCulture(hubRequestOptions);
    const locale = hub_common_1.convertToWellKnownLocale(culture);
    // Fire that off
    return hub_common_1.fetchHubTranslation(locale, hubRequestOptions.portalSelf)
        .then((translations) => {
        // delegate to createTeamGroups
        return _create_team_groups_1._createTeamGroups(title, groupsToCreate, translations, hubRequestOptions);
    })
        .catch((ex) => {
        throw Error(`Error in team-utils::createHubTeam ${ex}`);
    });
}
exports.createHubTeam = createHubTeam;
//# sourceMappingURL=create-hub-team.js.map