"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._createTeamGroups = void 0;
const _translate_team_template_1 = require("./_translate-team-template");
const _create_team_group_1 = require("./_create-team-group");
/**
 * Internal: Actually create the team groups
 * @param {String} title Title for the Team group
 * @param {Array} groupTemplates Array of group definitions to create the groups
 * @param {IHubRequestOptions} hubRequestOptions
 * @private
 */
function _createTeamGroups(title, groupTemplates, translations, hubRequestOptions) {
    // now translate the templates...
    const translatedTemplates = groupTemplates.map(tmpl => {
        return _translate_team_template_1._translateTeamTemplate(tmpl, title, translations);
    });
    // now we actually create the groups... obvs async...
    return Promise.all(translatedTemplates.map(grpTmpl => {
        return _create_team_group_1._createTeamGroup(hubRequestOptions.portalSelf.user, grpTmpl, hubRequestOptions);
    }))
        .then(groups => {
        // hoist out the id's into a structure that has the groupnameProperty: id
        const props = groups.reduce((acc, grp) => {
            // assign to the property, if one is specified
            if (grp.config.propertyName) {
                acc[grp.config.propertyName] = grp.id;
            }
            return acc;
        }, {});
        // remove config node
        groups.forEach(g => delete g.config);
        // construct the return the hash...
        // props: the props which can be spread into the item.properties hash..
        // groups: the array of groups that were created
        return {
            props,
            groups: groups
        };
    })
        .catch(ex => {
        throw Error(`Error in team-utils::_createTeamGroups ${ex}`);
    });
}
exports._createTeamGroups = _createTeamGroups;
//# sourceMappingURL=_create-team-groups.js.map