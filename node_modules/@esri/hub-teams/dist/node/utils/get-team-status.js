"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTeamStatus = void 0;
const hub_common_1 = require("@esri/hub-common");
const get_team_by_id_1 = require("./get-team-by-id");
const can_user_create_team_1 = require("./can-user-create-team");
const type_map_1 = require("./type-map");
/**
 * Given an item, a teamType and a user, return the status
 * of the team ('ok', 'missing', 'broken', 'fixable' ), along
 * with specific details:
 * id: id of the group
 * isMissing: was the group simply never created?
 * isBroken: true if the item has an id for the group, but the group can not be found
 * canFix: true if user can create the group
 * If a team that a route depends on returns `isBroken` the route should redirect
 * to /teams/repair, which will do a full inspection, list things that are broken
 * and then conduct any repairs that can be done. It will list the issues, with
 * the intent of training customers to NOT mess with Team groups in AGO.
 * Once repairs are complete, the user will click a button to return to the route they
 * we attempting to enter before this diversion.
 *
 * @export
 * @param {IItem} item Site or Initiative ITEM (not model)
 * @param {("core" | "content" | "followers")} teamType Type of team to check for
 * @param {IUser} user User Object
 * @param {IHubRequestOptions} ro Auth
 * @return {*}  {Promise<ITeamStatus>}
 */
async function getTeamStatus(item, teamType, user, ro) {
    // Set up Team status result object
    const result = {
        teamType,
        id: null,
        isOk: false,
        isMissing: true,
        isBroken: false,
        canFix: false,
        isMember: false,
    };
    // Get id out of item.properties.[the team type]
    const id = hub_common_1.getProp(hub_common_1.getProp(item, "properties"), type_map_1.TYPEMAP[teamType]);
    // If there's an id...
    if (id) {
        try {
            // Check to see if the team exists
            const group = await get_team_by_id_1.getTeamById(id, ro);
            // if it does..
            if (group) {
                result.id = id;
                result.isOk = true;
                result.isMissing = false;
            }
            else {
                // If it doesn't, then check to see if user can Create team
                result.id = id;
                result.isBroken = true;
                result.canFix = await can_user_create_team_1.canUserCreateTeam(user, teamType, ro);
            }
        }
        catch (ex) {
            // If the search errors then check if user can create team
            result.id = id;
            result.isBroken = true;
            result.canFix = await can_user_create_team_1.canUserCreateTeam(user, teamType, ro);
        }
    }
    else {
        // If there is not an id then check if the user can create the team
        result.canFix = await can_user_create_team_1.canUserCreateTeam(user, teamType, ro);
    }
    return result;
}
exports.getTeamStatus = getTeamStatus;
//# sourceMappingURL=get-team-status.js.map