"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.processEmailUsers = void 0;
const hub_common_1 = require("@esri/hub-common");
/**
 * @private
 * Governs the logic for emailing N users. It acts under the assumption
 * that all the 'community' users are the ones being emailed (this is due to platform rules we conform to)
 * Function is called upstream depending on if an email object is attached to the context.
 * Email object contains its own auth as it'll require the community admin to send the email itself.
 * An individual email call goes out for each user due to how the response of multiple users in a single call works.
 *
 * @export
 * @param {IAddOrInviteContext} context context object
 * @return {IAddOrInviteResponse} response object
 */
async function processEmailUsers(context) {
    // Fetch users out of context. We only email community users so we are
    // explicit about that
    const users = hub_common_1.getProp(context, "community");
    const notEmailed = [];
    let errors = [];
    // iterate through users as we want a distinct email call per user due to how
    // batch email will only respond with success: true/false
    // and if there is an error then it gets priority even though successes do still go through
    for (const user of users) {
        // Make email call...
        const emailResponse = await hub_common_1.emailOrgUsers([user], hub_common_1.getProp(context, "email.message"), hub_common_1.getProp(context, "email.auth"), true);
        // If it's just a failed email
        // then add username to notEmailed array
        if (!emailResponse.success) {
            notEmailed.push(user.username);
            // If there was a legit error
            // Then only the error returns from
            // online. Add error AND include username in notEmailed array.
            if (emailResponse.errors) {
                errors = errors.concat(emailResponse.errors);
            }
        }
    }
    // if you leave out any of the props
    // from the final object and you are concatting together arrays you can concat
    // an undeifined inside an array which will throw off array lengths.
    return {
        users: users.map((u) => u.username),
        notEmailed,
        errors,
        notInvited: [],
        notAdded: [],
    };
}
exports.processEmailUsers = processEmailUsers;
//# sourceMappingURL=process-email-users.js.map