"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllowedGroupAccess = void 0;
const has_all_privileges_1 = require("./has-all-privileges");
const group_access_privs_1 = require("./group-access-privs");
const hub_common_1 = require("@esri/hub-common");
/**
 * Returns the allowed group access based on a user's privileges
 * and org level settings
 * @param requestedAccess public || org || private
 * @param user User object w/ privileges array
 * @param portal optional
 */
function getAllowedGroupAccess(requestedAccess, user, portal) {
    // portal-wide flag takes presidence, and is not sync'd with privs
    const portalWideCanSharePublic = hub_common_1.getProp(portal, "canSharePublic") || false;
    // compute what access level the current user can create the group with
    const canCreatePublic = portalWideCanSharePublic &&
        has_all_privileges_1.hasAllPrivileges(user, group_access_privs_1.GROUP_ACCESS_PRIVS.public);
    const canCreateOrg = has_all_privileges_1.hasAllPrivileges(user, group_access_privs_1.GROUP_ACCESS_PRIVS.org);
    // default to the requested access...
    let result = requestedAccess;
    // if they requested public, but can't make public...
    if (requestedAccess === "public" && !canCreatePublic) {
        // step down to org...
        result = "org";
        // but if they can't do that...
        if (!canCreateOrg) {
            // then do private
            result = "private";
        }
    }
    else {
        // if the requsted access was not public, it's either org or private
        // and if they can't create do org...
        if (requestedAccess === "org" && !canCreateOrg) {
            // must be private
            result = "private";
        }
    }
    return result;
}
exports.getAllowedGroupAccess = getAllowedGroupAccess;
//# sourceMappingURL=get-allowed-group-access.js.map