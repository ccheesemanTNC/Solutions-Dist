"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeTeamFromItems = void 0;
const arcgis_rest_portal_1 = require("@esri/arcgis-rest-portal");
const hub_common_1 = require("@esri/hub-common");
/**
 * Removes a Team from N hub models.
 * First, if passed deleteTeam, it will delete the team
 * Then it iterates over an array of IModels and removes the given team ID from their teams array
 *
 * @export
 * @param {string} teamId Team ID of the team we are removing
 * @param {IModel[]} models Array of IModels
 * @param {UserSession} authentication Auth
 * @return {*}  {Promise<IUpdateItemResponse[]>}
 */
async function removeTeamFromItems(teamId, models, authentication) {
    // Iterate over all items...
    return Promise.all(models.map((model) => {
        // clone the item before modifying
        const clonedModel = hub_common_1.cloneObject(model);
        // remove the id from the item.properties.teams array
        clonedModel.item.properties.teams = hub_common_1.without(clonedModel.item.properties.teams, teamId);
        // Check if the user has access to edit the item. itemControl is only present when the item is directly fetched
        // 
        return clonedModel.item.itemControl === "admin" || clonedModel.item.itemControl === "update"
            // If yes, then update the item
            ? arcgis_rest_portal_1.updateItem({
                item: clonedModel.item,
                authentication,
            })
            // Otherwise return a 'fail' state for that item specifically
            : { id: clonedModel.item.id, success: false };
    }));
}
exports.removeTeamFromItems = removeTeamFromItems;
//# sourceMappingURL=remove-team-from-items.js.map