import { TEAMTYPES } from "./types";
import { getHubProduct, getCulture, convertToWellKnownLocale, fetchHubTranslation, getSubscriptionType, } from "@esri/hub-common";
import { getUserCreatableTeams } from "./utils/get-user-creatable-teams";
import { _createTeamGroups } from "./utils/_create-team-groups";
/**
 * Create a single Team, using the same logic as creating multiple Teams.
 * Also allows a set of custom props to be passed in and applied to the team.
 *
 * This should be used PRIOR to creating Sites/Initiatives.
 * @param {ICreateHubTeamOptions} createHubTeamOptions
 */
export function createHubTeam(opts) {
    var title = opts.title, type = opts.type, props = opts.props, hubRequestOptions = opts.hubRequestOptions;
    // validate that the type is valid...
    if (TEAMTYPES.indexOf(type) === -1) {
        throw new Error("createHubTeam was passed " + type + " which is not a valid type of team. Please send one of: " + TEAMTYPES.join(","));
    }
    // get all the groups the current user can create...
    // filter just the ones that match type...
    var portalSelf = hubRequestOptions.portalSelf;
    var product = getHubProduct(portalSelf);
    var subscriptionType = getSubscriptionType(portalSelf);
    var groupsToCreate = getUserCreatableTeams(portalSelf.user, product, portalSelf.currentVersion, subscriptionType)
        .filter(function (g) {
        return g.config.type === type;
    })
        .map(function (grp) {
        // If props are passed in, spread them over the group object, but only if type === `team`
        if (grp.config.type === "team") {
            return Object.assign({}, grp, props);
        }
        else {
            return grp;
        }
    });
    // use the locale of the current user, or en-us as a fall-back
    var culture = getCulture(hubRequestOptions);
    var locale = convertToWellKnownLocale(culture);
    // Fire that off
    return fetchHubTranslation(locale, hubRequestOptions.portalSelf)
        .then(function (translations) {
        // delegate to createTeamGroups
        return _createTeamGroups(title, groupsToCreate, translations, hubRequestOptions);
    })
        .catch(function (ex) {
        throw Error("Error in team-utils::createHubTeam " + ex);
    });
}
//# sourceMappingURL=create-hub-team.js.map