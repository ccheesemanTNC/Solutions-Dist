import { __awaiter, __generator } from "tslib";
import { addOrInviteUsersToTeam } from "./add-or-invite-users-to-team";
/**
 * addOrInviteUsersToTeams adds/invites N users to N teams
 * Initial entry point function for add/invite members flow
 * when dealing with multiple teams.
 * Responses from each group are then consolidated into the final returned object.
 *
 * @export
 * @param {string[]} groupIds array of groups we are adding users to
 * @param {IUserWithOrgType[]} users array of users to add to those teams
 * @param {IAuthenticationManager} primaryRO primary requestOptions
 * @param {boolean} [canAutoAddUser=false] Can we automatically add a user to the team?
 * @param {boolean} [addUserAsGroupAdmin=false] Can the user be added to a team as an administrator of that team?
 * @param {IAddOrInviteEmail} [email] Email object contains auth for the email && the email object itself
 * @return {*}  {Promise<{
 *   notAdded: string[];
 *   notInvited: string[];
 *   notEmailed: string[];
 *   errors: ArcGISRequestError[];
 *   responses: IAddOrInviteToTeamResult[];
 * }>} Results object
 */
export function addOrInviteUsersToTeams(groupIds, users, primaryRO, canAutoAddUser, addUserAsGroupAdmin, email) {
    if (canAutoAddUser === void 0) { canAutoAddUser = false; }
    if (addUserAsGroupAdmin === void 0) { addUserAsGroupAdmin = false; }
    return __awaiter(this, void 0, void 0, function () {
        var notAdded, notInvited, notEmailed, errors, responses, _i, groupIds_1, groupId, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    notAdded = [];
                    notInvited = [];
                    notEmailed = [];
                    errors = [];
                    responses = [];
                    _i = 0, groupIds_1 = groupIds;
                    _a.label = 1;
                case 1:
                    if (!(_i < groupIds_1.length)) return [3 /*break*/, 4];
                    groupId = groupIds_1[_i];
                    return [4 /*yield*/, addOrInviteUsersToTeam(groupId, users, primaryRO, canAutoAddUser, addUserAsGroupAdmin, email)];
                case 2:
                    result = _a.sent();
                    // attach each groups results
                    responses.push(result);
                    // surface results to the top of the stack...
                    notAdded = notAdded.concat(result.notAdded);
                    errors = errors.concat(result.errors);
                    notInvited = notInvited.concat(result.notInvited);
                    notEmailed = notEmailed.concat(result.notEmailed);
                    _a.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: 
                // Return built up result object.
                return [2 /*return*/, {
                        notAdded: notAdded,
                        notInvited: notInvited,
                        notEmailed: notEmailed,
                        errors: errors,
                        responses: responses,
                    }];
            }
        });
    });
}
//# sourceMappingURL=add-or-invite-users-to-teams.js.map