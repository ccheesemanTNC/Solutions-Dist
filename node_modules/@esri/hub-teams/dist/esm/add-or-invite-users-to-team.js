import { __awaiter, __generator, __spreadArrays } from "tslib";
import { addOrInviteCommunityUsers, addOrInviteOrgUsers, addOrInviteWorldUsers, addOrInvitePartneredUsers, addOrInviteCollaborationCoordinators, groupUsersByOrgRelationship, } from "./utils";
/**
 * Add or invite N users to a single team
 * Org|community|world logic flows are run even if there are no users applicable for that particular path.
 * Results from each path are consolidated and surfaced in the return object as failures and errors are of
 * more importance than successes.
 *
 * @export
 * @param {string} groupId Group we are adding users to
 * @param {IUserWithOrgType[]} users array of users to add
 * @param {IAuthenticationManager} primaryRO primary requestOptions
 * @param {boolean} canAutoAddUser Can we automatically add a user to the team?
 * @param {boolean} addUserAsGroupAdmin Should the user be added as a group administrator
 * @param {IAddOrInviteEmail} email Email object
 * @return {IAddOrInviteToTeamResult} Result object
 */
export function addOrInviteUsersToTeam(groupId, users, primaryRO, canAutoAddUser, addUserAsGroupAdmin, email) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedUsers, inputParams, context, result, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    parsedUsers = groupUsersByOrgRelationship(users);
                    inputParams = {
                        groupId: groupId,
                        primaryRO: primaryRO,
                        allUsers: users,
                        canAutoAddUser: canAutoAddUser,
                        addUserAsGroupAdmin: addUserAsGroupAdmin,
                        email: email,
                    };
                    context = Object.assign(inputParams, parsedUsers);
                    _a = {};
                    return [4 /*yield*/, addOrInviteCommunityUsers(context)];
                case 1:
                    _a.community = _b.sent();
                    return [4 /*yield*/, addOrInviteOrgUsers(context)];
                case 2:
                    _a.org = _b.sent();
                    return [4 /*yield*/, addOrInviteWorldUsers(context)];
                case 3:
                    _a.world = _b.sent();
                    return [4 /*yield*/, addOrInvitePartneredUsers(context)];
                case 4:
                    _a.partnered = _b.sent();
                    return [4 /*yield*/, addOrInviteCollaborationCoordinators(context)];
                case 5:
                    result = (_a.collaborationCoordinator = _b.sent(),
                        _a.notAdded = [],
                        _a.notInvited = [],
                        _a.notEmailed = [],
                        _a.errors = [],
                        _a.groupId = groupId,
                        _a);
                    // Bring not added / invited / emailed / errors up to the top level
                    result.notAdded = __spreadArrays(result.community.notAdded, result.org.notAdded, result.world.notAdded);
                    result.notInvited = __spreadArrays(result.community.notInvited, result.org.notInvited, result.world.notInvited);
                    result.notEmailed = __spreadArrays(result.community.notEmailed, result.org.notEmailed, result.world.notEmailed);
                    result.errors = __spreadArrays(result.community.errors, result.org.errors, result.world.errors);
                    return [2 /*return*/, result];
            }
        });
    });
}
//# sourceMappingURL=add-or-invite-users-to-team.js.map