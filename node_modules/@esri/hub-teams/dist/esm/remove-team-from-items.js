import { __awaiter, __generator } from "tslib";
import { updateItem } from "@esri/arcgis-rest-portal";
import { cloneObject, without } from "@esri/hub-common";
/**
 * Removes a Team from N hub models.
 * First, if passed deleteTeam, it will delete the team
 * Then it iterates over an array of IModels and removes the given team ID from their teams array
 *
 * @export
 * @param {string} teamId Team ID of the team we are removing
 * @param {IModel[]} models Array of IModels
 * @param {UserSession} authentication Auth
 * @return {*}  {Promise<IUpdateItemResponse[]>}
 */
export function removeTeamFromItems(teamId, models, authentication) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            // Iterate over all items...
            return [2 /*return*/, Promise.all(models.map(function (model) {
                    // clone the item before modifying
                    var clonedModel = cloneObject(model);
                    // remove the id from the item.properties.teams array
                    clonedModel.item.properties.teams = without(clonedModel.item.properties.teams, teamId);
                    // Check if the user has access to edit the item. itemControl is only present when the item is directly fetched
                    // 
                    return clonedModel.item.itemControl === "admin" || clonedModel.item.itemControl === "update"
                        // If yes, then update the item
                        ? updateItem({
                            item: clonedModel.item,
                            authentication: authentication,
                        })
                        // Otherwise return a 'fail' state for that item specifically
                        : { id: clonedModel.item.id, success: false };
                }))];
        });
    });
}
//# sourceMappingURL=remove-team-from-items.js.map