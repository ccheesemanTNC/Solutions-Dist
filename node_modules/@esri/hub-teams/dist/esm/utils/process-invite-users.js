import { __awaiter, __generator } from "tslib";
import { getProp, inviteUsers } from "@esri/hub-common";
/**
 * @private
 * Governs the logic for inviting N users to a single group.
 * An individual invite call goes out for each user and the results are consolidated.
 * See comment in function about the for...of loop which explains reasoning.
 *
 * @export
 * @param {IAddOrInviteContext} context context object
 * @param {string} userType what type of user is it: org | world | community
 * @return {IAddOrInviteResponse} response object
 */
export function processInviteUsers(context, userType) {
    return __awaiter(this, void 0, void 0, function () {
        var users, notInvited, errors, addUserAsGroupAdmin, _i, users_1, user, inviteResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    users = getProp(context, userType);
                    notInvited = [];
                    errors = [];
                    addUserAsGroupAdmin = context.addUserAsGroupAdmin;
                    _i = 0, users_1 = users;
                    _a.label = 1;
                case 1:
                    if (!(_i < users_1.length)) return [3 /*break*/, 4];
                    user = users_1[_i];
                    return [4 /*yield*/, inviteUsers(getProp(context, "groupId"), [user], getProp(context, "primaryRO"), 20160, // timeout
                        addUserAsGroupAdmin ? "group_admin" : "group_member" // if we are in a core team we want to invite them as a group admin, otherwise a group member
                        )];
                case 2:
                    inviteResponse = _a.sent();
                    // If it's just a failed invite then
                    // add username to notInvited array
                    if (!inviteResponse.success) {
                        notInvited.push(user.username);
                        // If there was a legit error
                        // Then only the error returns from
                        // online. Add error AND include username in notInvited array.
                        if (inviteResponse.errors) {
                            errors = errors.concat(inviteResponse.errors);
                        }
                    }
                    _a.label = 3;
                case 3:
                    _i++;
                    return [3 /*break*/, 1];
                case 4: 
                // if you leave out any of the props
                // from the final object and you are concatting together arrays you can concat
                // an undeifined inside an array which will throw off array lengths.
                return [2 /*return*/, {
                        users: users.map(function (u) { return u.username; }),
                        notInvited: notInvited,
                        errors: errors,
                        notEmailed: [],
                        notAdded: [],
                    }];
            }
        });
    });
}
//# sourceMappingURL=process-invite-users.js.map