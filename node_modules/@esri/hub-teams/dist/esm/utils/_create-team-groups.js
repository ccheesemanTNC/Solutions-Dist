import { _translateTeamTemplate } from "./_translate-team-template";
import { _createTeamGroup } from "./_create-team-group";
/**
 * Internal: Actually create the team groups
 * @param {String} title Title for the Team group
 * @param {Array} groupTemplates Array of group definitions to create the groups
 * @param {IHubRequestOptions} hubRequestOptions
 * @private
 */
export function _createTeamGroups(title, groupTemplates, translations, hubRequestOptions) {
    // now translate the templates...
    var translatedTemplates = groupTemplates.map(function (tmpl) {
        return _translateTeamTemplate(tmpl, title, translations);
    });
    // now we actually create the groups... obvs async...
    return Promise.all(translatedTemplates.map(function (grpTmpl) {
        return _createTeamGroup(hubRequestOptions.portalSelf.user, grpTmpl, hubRequestOptions);
    }))
        .then(function (groups) {
        // hoist out the id's into a structure that has the groupnameProperty: id
        var props = groups.reduce(function (acc, grp) {
            // assign to the property, if one is specified
            if (grp.config.propertyName) {
                acc[grp.config.propertyName] = grp.id;
            }
            return acc;
        }, {});
        // remove config node
        groups.forEach(function (g) { return delete g.config; });
        // construct the return the hash...
        // props: the props which can be spread into the item.properties hash..
        // groups: the array of groups that were created
        return {
            props: props,
            groups: groups
        };
    })
        .catch(function (ex) {
        throw Error("Error in team-utils::_createTeamGroups " + ex);
    });
}
//# sourceMappingURL=_create-team-groups.js.map